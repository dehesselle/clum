# Centralized Local User Management
# https://github.com/dehesselle/clum
#
- name: create primary group for user {{ item.uname }}
  include_tasks: create_group.yml gname="{{ item.uname }}" gid="{{ item.uid }}"
- name: create secondary groups for user {{ item.uname }}
  include_tasks: create_group.yml gname="{{ item2.gname }}" gid="{{ item2.gid }}"
  with_items:
    - "{{ item.groups }}"
  loop_control:
    loop_var: item2
# This looks like a workaround because it is. There is no way using the user
# module without having it modify /etc/shadow. So we save the password here...
- name: save a pre-existing password
  command: grep "{{ item.uname }}:" /etc/shadow
  register: get_password   # .rc=0 when matched; .rc=1 when no match
  failed_when:
    - get_password.rc > 1
    - get_password.rc < 0
  become: true
# ...let the user module do its thing...
- name: create user {{ item.uname }}
  user:
    name: "{{ item.uname}}"
    comment: "{{ item.rname }}"
    uid: "{{ item.uid }}"
    group: "{{ item.uname }}"
    groups: "{{ item.groups|map(attribute='gname')|list }}"
    createhome: yes
    shell: /bin/bash
    # password = start123
    password: $6$OLXFYXdUhkfqAVyU$DUG2pvNERMzMzALXF0jVu6NQDk2x7rt2XX5Uv6vLkjgsjjemdyXt6oH.uNX32dN1SVjFqNDQtdIpfpAxmoL9P.
    state: present
    update_password: always
  become: true
# ...and change it back.
- name: restore a pre-existing password
  lineinfile:
    path: /etc/shadow
    regexp: "{{ item.uname }}:"
    line: "{{ get_password.stdout }}"
  become: true
  when: get_password.rc == 0   # only if there is a saved password
# In case of a pre-existing home directory we need to make sure it's owned
# by the user.
- name: set owner and group for /home/{{ item.uname }}
  include_tasks: set_homedir_og.yml uname="{{ item.uname }}"

